alertmanager:
  ingress: &ingress
    enabled: false
    ingressClassName: ingress-nginx-admin
    annotations:
      kubernetes.io/tls-acme: "true"
      # acme.cert-manager.io/http01-ingress-class: ingress-nginx-admin
    hosts:
    - alertmanager.admin.plato-devncoargo.dev-sbr.com
    pathType: Prefix
    tls:
    - secretName: alertmanager-tls-certificate
      hosts:
      - alertmanager.admin.plato-devncoargo.dev-sbr.com
grafana:
  # ## ForceDeployDatasources Create datasource configmap even if grafana deployment has been disabled
  # ##
  # forceDeployDatasources: false

  # ## ForceDeployDashboard Create dashboard configmap even if grafana deployment has been disabled
  # ##
  # forceDeployDashboards: false

  ## Deploy default dashboards
  ##
  defaultDashboardsEnabled: false

  ## Timezone for the default dashboards
  ## Other options are: browser or a specific timezone, i.e. Europe/Luxembourg
  ##
  defaultDashboardsTimezone: Europe/Paris

  sidecar:
    dashboards:
      # enabled: true
      # # Additional environment variables for the dashboards sidecar
      # env: {}
      # # Do not reprocess already processed unchanged resources on k8s API reconnect.
      # # ignoreAlreadyProcessed: true
      # SCProvider: true
      # # label that the configmaps with dashboards are marked with
      # label: grafana_dashboard
      # # value of label that the configmaps with dashboards are set to
      # labelValue: "1"
      # Log level. Can be one of: DEBUG, INFO, WARN, ERROR, CRITICAL.
      logLevel: DEBUG
      # # folder in the pod that should hold the collected dashboards (unless `defaultFolderName` is set)
      # folder: /tmp/dashboards
      # # The default folder name, it will create a subfolder under the `folder` and put dashboards in there instead
      # defaultFolderName: null
      # # Namespaces list. If specified, the sidecar will search for config-maps/secrets inside these namespaces.
      # # Otherwise the namespace in which the sidecar is running will be used.
      # # It's also possible to specify ALL to search in all namespaces.
      # searchNamespace: null
      # # Method to use to detect ConfigMap changes. With WATCH the sidecar will do a WATCH requests, with SLEEP it will list all ConfigMaps, then sleep for 60 seconds.
      # watchMethod: WATCH
      # # search in configmap, secret or both
      # resource: both
      # # If specified, the sidecar will look for annotation with this name to create folder and put graph here.
      # # You can use this parameter together with `provider.foldersFromFilesStructure`to annotate configmaps and create folder structure.
      # folderAnnotation: null
      # # Absolute path to shell script to execute after a configmap got reloaded
      # script: null
      # # watchServerTimeout: request to the server, asking it to cleanly close the connection after that.
      # # defaults to 60sec; much higher values like 3600 seconds (1h) are feasible for non-Azure K8S
      # # watchServerTimeout: 3600
      # #
      # # watchClientTimeout: is a client-side timeout, configuring your local socket.
      # # If you have a network outage dropping all packets with no RST/FIN,
      # # this is how long your client waits before realizing & dropping the connection.
      # # defaults to 66sec (sic!)
      # # watchClientTimeout: 60
      # #
      # provider configuration that lets grafana manage the dashboards
      provider:
        # # name of the provider, should be unique
        # name: sidecarProvider
        # # orgid as configured in grafana
        # orgid: 1
        # # folder in which the dashboards should be imported in grafana
        # folder: '' #/var/lib/grafana/dashboards
        # # type of the provider
        # type: file
        # # disableDelete to activate a import-only behaviour
        # disableDelete: false
        # allow updating provisioned dashboards from the UI
        allowUiUpdates: true
        # # allow Grafana to replicate dashboard structure from filesystem
        # foldersFromFilesStructure: false
      # # Additional dashboard sidecar volume mounts
      # extraMounts: []
      # # Sets the size limit of the dashboard sidecar emptyDir volume
      # sizeLimit: {}

  # https://grafana.com/docs/grafana/latest/administration/configuration/
  grafana.ini:
    server:
      root_url: https://grafana.admin.plato-devncoargo.dev-sbr.com
    # https://grafana.com/docs/grafana/next/setup-grafana/configure-security/configure-authentication/generic-oauth/
    auth.generic_oauth:
      enabled: true
      name: Keycloak
      allow_sign_up: "true"
      scopes: profile,email,groups
      client_id: grafana
      client_secret: iagsmFWVLS5DcEoP9SgGCE3OFAG4g5VF
      auth_url:   https://keycloak-01.admin.plato-devncoargo.dev-sbr.com/realms/master/protocol/openid-connect/auth
      token_url:  https://keycloak-01.admin.plato-devncoargo.dev-sbr.com/realms/master/protocol/openid-connect/token
      api_url:    https://keycloak-01.admin.plato-devncoargo.dev-sbr.com/realms/master/protocol/openid-connect/userinfo
      role_attribute_path: contains(groups[*], 'grafana-admin') && 'Admin' || contains(groups[*], 'grafana-dev') && 'Editor' || 'Viewer'
      tls_skip_verify_insecure: "true"
  admin:
    existingSecret: grafana-secret
  persistence:
    size: 256Mi
  ingress:
    <<: *ingress
    enabled: true
    hosts:
    - grafana.admin.plato-devncoargo.dev-sbr.com
    tls:
    - secretName: grafana-tls-certificate
      hosts:
      - grafana.admin.plato-devncoargo.dev-sbr.com
prometheus:
  ingress:
    <<: *ingress
    enabled: false
    hosts:
    - prometheus.admin.plato-devncoargo.dev-sbr.com
    pathType: Prefix
    tls:
    - secretName: prometheus-tls-certificate
      hosts:
      - prometheus.admin.plato-devncoargo.dev-sbr.com
  prometheusSpec:
    retention: 1d
    retentionSize: 10GB
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes:
          - ReadWriteOnce
          resources:
            requests:
              storage: 100Gi
