---
apiVersion: v1
kind: Pod
metadata:
  name: debug
  namespace: keycloak
  labels:
    foo: bar
spec:
  terminationGracePeriodSeconds: 5
  containers:
  - 
    name: keycloak-config-cli
    command:
      - sh
      - "-c"
      - |
        /bin/bash <<'EOF'
          update-ca-certificates --fresh
          apt update && apt install -y dnsutils curl ncat openssl iputils-ping

          env | sort

          set -x
          dig A +short keycloak-headless.keycloak.svc.cluster.local
          ping keycloak-headless -w 1
          nc -w 5 -vz keycloak-headless.keycloak.svc.cluster.local 8080
          nc -w 5 -vz keycloak-headless.keycloak.svc.cluster.local 8443

          dig A +short keycloak.keycloak.svc.cluster.local
          ping keycloak -w 1
          nc -w 5 -vz keycloak.keycloak.svc.cluster.local 80
          nc -w 5 -vz keycloak.keycloak.svc.cluster.local 443

          KEYCLOAK_URL=http://keycloak-headless.keycloak.svc.cluster.local:8080/
          output=$(curl \
            --write-out "%{http_code}" \
            --data "client_id=admin-cli" \
            --data "username=${KEYCLOAK_USER}" \
            --data "password=${KEYCLOAK_PASSWORD}" \
            --data "grant_type=password" \
            "${KEYCLOAK_URL}realms/master/protocol/openid-connect/token")         
          echo "$output"

          KEYCLOAK_URL=https://keycloak-headless.keycloak.svc.cluster.local:8443/
          output=$(curl \
            --write-out "%{http_code}" \
            --data "client_id=admin-cli" \
            --data "username=${KEYCLOAK_USER}" \
            --data "password=${KEYCLOAK_PASSWORD}" \
            --data "grant_type=password" \
            --insecure \
            "${KEYCLOAK_URL}realms/master/protocol/openid-connect/token")
          echo "$output"

          echo "" | openssl s_client -showcerts -connect keycloak-headless.keycloak.svc.cluster.local:8443 2>&1 |\
          sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p;/-END CERTIFICATE-/a\\x0' |\
          sed -e '$ d' |\
          xargs -0rl -I% sh -c "echo '%' | openssl x509 -subject -issuer -dates -fingerprint -noout -ext subjectAltName"

          KEYCLOAK_URL=https://keycloak.keycloak.svc.cluster.local:443/
          output=$(curl \
            --write-out "%{http_code}" \
            --data "client_id=admin-cli" \
            --data "username=${KEYCLOAK_USER}" \
            --data "password=${KEYCLOAK_PASSWORD}" \
            --data "grant_type=password" \
            --insecure \
            "${KEYCLOAK_URL}realms/master/protocol/openid-connect/token")
          echo "$output"

          tail -f /dev/null
        EOF
      # java -jar /opt/bitnami/keycloak-config-cli/keycloak-config-cli-19.0.3.jar
      #Â java -jar /opt/bitnami/keycloak-config-cli/keycloak-config-cli-19.0.3.jar --import.files.locations=/import/config.yaml --keycloak.ssl-verify=false
    env:
      - name: KEYCLOAK_URL
        value: https://keycloak.keycloak.svc.cluster.local:443/ # http://keycloak-headless.keycloak.svc.cluster.local:8080/
      - name: KEYCLOAK_USER
        value: user
      - name: KEYCLOAK_PASSWORD
        valueFrom:
          secretKeyRef:
            key: admin-password
            name: keycloak-auth
      - name: KEYCLOAK_AVAILABILITYCHECK_ENABLED
        value: "true"
      - name: IMPORT_FILES
        value: /import/*
      - name: LOGGING_LEVEL_ROOT
        value: debug
    # docker run quay.io/skopeo/stable:latest list-tags docker://docker.io/bitnami/keycloak-config-cli  | yq e -P
    image: docker.io/bitnami/keycloak-config-cli:5.12.0-debian-12-r6
    # image: docker.io/bitnami/keycloak-config-cli:5.5.0-debian-11-r8
    imagePullPolicy: IfNotPresent
    resources:
      limits: {}
      requests: {}
    securityContext:
      allowPrivilegeEscalation: true
      runAsNonRoot: false
      runAsUser: 0
    volumeMounts:
      - mountPath: /import
        name: cfg
        readOnly: true
      - name: certificate
        mountPath: /etc/ssl/certs/keycloak-ca.crt # your self-signed CA part inside the secret 
        subPath: ca.crt
      - name: certificate
        mountPath: /etc/ssl/certs/keycloak-tls.crt
        subPath: tls.crt
  restartPolicy: Never
  securityContext:
    fsGroup: 0
  serviceAccountName: keycloak
  volumes:
    - name: cfg
      secret:
        secretName: keycloak-config
    - name: certificate
      secret:
        secretName: keycloak-ca
        defaultMode: 420