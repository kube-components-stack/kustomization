# artifacthub                                       https://artifacthub.io/packages/helm/argo/argo-cd
# github                                            https://github.com/argoproj/argo-helm/tree/master/charts/argo-cd
# values.yaml                                       https://github.com/argoproj/argo-helm/blob/master/charts/argo-cd/values.yaml
apiVersion: builtin
kind: HelmChartInflationGenerator
metadata:
  name: argo-cd-helm-chart
name: &name argo-cd
version: 5.16.4 # 4.10.0
repo: https://argoproj.github.io/argo-helm
releaseName: *name
namespace: argocd
includeCRDs: false
valuesFile: values.yaml
valuesMerge: override                 # merge, override or replace
valuesInline:
  ## Argo Configs
  configs:
    # Argo CD configuration parameters
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cmd-params-cm.yaml
    params:
      # -- Enable GZIP compression
      server.enable.gzip: true
      # Paths to be excluded from the tarball streamed to plugins. Separate with ;
      reposerver.plugin.tar.exclusions: ".git/*"
  crds:
    install: false
  fullnameOverride: argocd
  global:
    image:
      imagePullPolicy: Always
    logging:
      # -- Set the global logging format. Either: `text` or `json`
      format: text
      # -- Set the global logging level. One of: `debug`, `info`, `warn` or `error`
      level: info
    securityContext:
      runAsUser: 999
      runAsGroup: 999
      fsGroup: 999
  applicationSet:
    # -- ApplicationSet controller log format. Either `text` or `json`
    # @default -- `""` (defaults to global.logging.format)
    logFormat: ""
    # -- ApplicationSet controller log level. One of: `debug`, `info`, `warn`, `error`
    # @default -- `""` (defaults to global.logging.level)
    logLevel: ""

    image:
      imagePullPolicy: Always
    resources:
      limits:
        cpu: '2'
        memory: 1Gi
      requests:
        cpu: 100m # 250m
        memory: 128Mi # 512Mi
    securityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      allowPrivilegeEscalation: false
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
  controller:
    # -- Application controller log format. Either `text` or `json`
    # @default -- `""` (defaults to global.logging.format)
    logFormat: ""
    # -- Application controller log level. One of: `debug`, `info`, `warn` or `error`
    # @default -- `""` (defaults to global.logging.level)
    logLevel: ""

    # -- Environment variables to pass to Argo CD controller
    # https://github.com/argoproj/argo-helm/issues/446
    # The application-controller pod is really the one that should be able to list pods based on the RBAC config.
    # This is also is true of the default install, where the server pod's service account can get pods but cannot list them.
    env:
      - name: HOME
        value: /tmp/argocd
      # - name: ARGOCD_SYNC_WAVE_DELAY # controls the delay in seconds between each sync-wave
      #   value: "2" # 2
      # environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issue. Note: metric is expensive to both query and store!
      - name: ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM
        value: "true"
    # -- Additional volumeMounts to the application controller main container
    volumeMounts:
      - name: tmp
        mountPath: /tmp
    # -- Additional volumes to the application controller pod
    volumes:
      - name: tmp
        emptyDir: {}
    ## Application controller commandline flags
    # See:
    # - https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/#argocd-application-controller
    # - https://github.com/argoproj/argo-cd/issues/3864
    # args:
    #   # -- define the application controller `--status-processors`
    #   statusProcessors: "55" # default: 20 => 50 (~1000 apps)
    #   # -- define the application controller `--operation-processors`
    #   operationProcessors: "30" # default: 20 => 25 (~1000 apps)
    #   # -- define the application controller `--app-resync`
    #   appResyncPeriod: "600" #"180" #"300"
    #   # -- define the application controller `--self-heal-timeout-seconds`
    #   selfHealTimeout: "5"
    #   # -- define the application controller `--repo-server-timeout-seconds`
    #   repoServerTimeoutSeconds: "420" #"60" #"300"

    # -- Additional command line arguments to pass to application controller
    # extraArgs:
    # - --kubectl-parallelism-limit
    # - "70"
    
    image:
      imagePullPolicy: Always
    initImage:
      imagePullPolicy: Always
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    resources:
      limits:
        cpu: '2'
        memory: 2Gi
      requests:
        cpu: 250m
        memory: 256Mi # 1Gi
    containerSecurityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      allowPrivilegeEscalation: false
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
  dex:
    image:
      imagePullPolicy: Always
    initImage:
      imagePullPolicy: Always
    livenessProbe:
      enabled: false
    readinessProbe:
      enabled: false
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 10m # 250m
        memory: 32Mi # 128Mi
    containerSecurityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      allowPrivilegeEscalation: false
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
  notifications:
    # -- Enable Notifications controller
    enabled: true

    # -- Notifications controller name string
    name: notifications
    
    # -- Argo CD dashboard url; used in place of {{.context.argocdUrl}} in templates
    # argocdUrl: ""

    secret:
      # -- Whether helm chart creates controller secret
      create: false
      # -- The name of the secret to use.
      ## If not set and create is true, the default name 'argocd-notifications-secret' is used
      name: argocd-notifications-secret

    # -- Notifications log format. Either `text` or `json`
    # @default -- `""` (defaults to global.logging.format)
    logFormat: ""
    # -- Notifications log level. One of: `debug`, `info`, `warn`, `error`
    # @default -- `""` (defaults to global.logging.level)
    logLevel: ""

    # Additional container environment variables
    extraEnv:
      - name: TZ
        value: Europe/Paris

    # -- Container Security Context
    containerSecurityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      allowPrivilegeEscalation: false

    # -- Configures notification services such as slack, email or custom webhook
    # @default -- See [values.yaml]
    ## For more information: https://argocd-notifications.readthedocs.io/en/stable/services/overview/
    notifiers:
      service.googlechat: |
        webhooks:
          spaceName: $space-webhook-url
      service.slack: |
        token: $devops-slack
      service.teams: |
        recipientUrls:
          devops-teams: $devops-teams
      service.grafana: |
        apiUrl: http://kube-prometheus-stack-grafana.monitoring.svc/api
        apiKey: $grafana-api-key-argocd-notifications
    # -- Contains centrally managed global application subscriptions
    ## For more information: https://argocd-notifications.readthedocs.io/en/stable/subscriptions/
    subscriptions:
      - recipients:
          - teams:devops-teams
          - slack:devops-slack
          - grafana:argocd
          - googlechat:spaceName
        triggers:
          - on-created
          - on-deleted
          - on-deployed
          - on-health-degraded
          - on-sync-failed
          - on-sync-running
          - on-sync-status-unknown
          - on-sync-succeeded
    # -- The notification template is used to generate the notification content
    ## For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
    # https://github.com/argoproj-labs/argocd-notifications/tree/master/catalog/templates
    # https://github.com/argoproj/argo-cd/tree/master/notifications_catalog
    # https://argocd-notifications.readthedocs.io/en/stable/services/overview/
    #Â https://github.com/argoproj/notifications-engine
    # https://developers.google.com/chat/how-tos/webhooks?hl=fr
    templates:
      # https://pkg.go.dev/time#Now
      # https://yourbasic.org/golang/format-parse-string-time-date-example/
      # https://medium.com/easyread/understanding-about-rfc-3339-for-datetime-formatting-in-software-engineering-940aa5d5f68a
      # For more information: https://argocd-notifications.readthedocs.io/en/stable/templates/
      template.app-created: |
        email:
          subject: Application {{.app.metadata.name}} has been created.
        message: Application {{.app.metadata.name}} has been created.
        teams:
          title: Application {{.app.metadata.name}} has been created.
      template.app-deleted: |
        email:
          subject: Application {{.app.metadata.name}} has been deleted.
        message: Application {{.app.metadata.name}} has been deleted.
        teams:
          title: Application {{.app.metadata.name}} has been deleted.
      template.app-deployed: |
        email:
          subject: New version of an application {{.app.metadata.name}} is up and running.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} is now running new version of deployments manifests.
        teams:
          themeColor: "#000080"
          facts: |
            [
              {
                "name": "Sync Status",
                "value": "{{.app.status.sync.status}}"
              },
              {
                "name": "Repository",
                "value": "{{.app.spec.source.repoURL}}"
              },
              {
                "name": "Revision",
                "value": "{{.app.status.sync.revision}}"
              },
              {
                "name": "Message",
                "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}"
              },
              {
                "name": "Author",
                "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
              }
              {{range $index, $c := .app.status.conditions}}
                {{if not $index}},{{end}}
                {{if $index}},{{end}}
                {
                  "name": "{{$c.type}}",
                  "value": "{{$c.message}}"
                }
              {{end}}
            ]
          potentialAction: |-
            [
              {
                "@type":"OpenUri",
                "name":"Open Repository",
                "targets":[{
                  "os":"default",
                  "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                }]
              },
              {
                "@type":"OpenUri",
                "name":"Operation Application",
                "targets":[{
                  "os":"default",
                  "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
                }]
              }
            ]
          title: New version of an application {{.app.metadata.name}} is up and running.
      template.app-health-degraded: |
        themeColor: "#FF0000"
        email:
          subject: Application {{.app.metadata.name}} has degraded.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} has degraded.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
        teams:
          facts: |
            [
              {
                "name": "Sync Status",
                "value": "{{.app.status.sync.status}}"
              },
              {
                "name": "Repository",
                "value": "{{.app.spec.source.repoURL}}"
              },
              {
                "name": "Message",
                "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Message}}"
              },
              {
                "name": "Author",
                "value": "{{(call .repo.GetCommitMetadata .app.status.sync.revision).Author}}"
              }
              {{range $index, $c := .app.status.conditions}}
                {{if not $index}},{{end}}
                {{if $index}},{{end}}
                {
                  "name": "{{$c.type}}",
                  "value": "{{$c.message}}"
                }
              {{end}}
            ]
          potentialAction: |
            [
              {
                "@type":"OpenUri",
                "name":"Open Repository",
                "targets":[{
                  "os":"default",
                  "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                }]
              },
              {
                "@type":"OpenUri",
                "name":"Open Application",
                "targets":[{
                  "os":"default",
                  "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
                }]
              }
            ]
          title: Application {{.app.metadata.name}} has degraded.
      template.app-sync-failed: |
        email:
          subject: Failed to sync application {{.app.metadata.name}}.
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}}  The sync operation of application {{.app.metadata.name}} has failed at {{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05 +0200"}} with the following error: {{.app.status.operationState.message}}
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        teams:
          themeColor: "#FF0000"
          facts: |
            [
              {
                "name": "Sync Status",
                "value": "{{.app.status.sync.status}}"
              },
              {
                "name": "Failed at",
                "value": "{{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05"}}"
              },
              {
                "name": "Repository",
                "value": "{{.app.spec.source.repoURL}}"
              }
              {{range $index, $c := .app.status.conditions}}
                {{if not $index}},{{end}}
                {{if $index}},{{end}}
                {
                  "name": "{{$c.type}}",
                  "value": "{{$c.message}}",
                }
              {{end}}
            ]
          potentialAction: |-
            [
              {
                "@type":"OpenUri",
                "name":"Open Repository",
                "targets":[{
                  "os":"default",
                  "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                }]
              },
              {
                "@type":"OpenUri",
                "name":"Open Operation",
                "targets":[{
                  "os":"default",
                  "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
                }]
              }
            ]
          title: Failed to sync application {{.app.metadata.name}}.
      template.app-sync-running: |
        email:
          subject: Start syncing application {{.app.metadata.name}}.
        message: |
          The sync operation of application {{.app.metadata.name}} has started at {{(call .time.Parse .app.status.operationState.startedAt).Local.Format "02/01/2006 15:04:05"}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        teams:
          facts: |
            [
              {
                "name": "Sync Status",
                "value": "{{.app.status.sync.status}}"
              },
              {
                "name": "Started at",
                "value": "{{(call .time.Parse .app.status.operationState.startedAt).Local.Format "02/01/2006 15:04:05"}}"
              },
              {
                "name": "Repository",
                "value": "{{.app.spec.source.repoURL}}"
              }
              {{range $index, $c := .app.status.conditions}}
                {{if not $index}},{{end}}
                {{if $index}},{{end}}
                {
                  "name": "{{$c.type}}",
                  "value": "{{$c.message}}",
                }
              {{end}}
            ]
          potentialAction: |-
            [
              {
                "@type":"OpenUri",
                "name":"Open Repository",
                "targets":[{
                  "os":"default",
                  "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                }]
              },
              {
                "@type":"OpenUri",
                "name":"Open Operation",
                "targets":[{
                  "os":"default",
                  "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
                }]
              }
            ]
          title: Start syncing application {{.app.metadata.name}}.
      template.app-sync-status-unknown: |
        email:
          subject: Application {{.app.metadata.name}} sync status is 'Unknown'
        message: |
          {{if eq .serviceType "slack"}}:exclamation:{{end}} Application {{.app.metadata.name}} sync is 'Unknown'.
          Application details: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}.
          {{if ne .serviceType "slack"}}
          {{range $c := .app.status.conditions}}
              * {{$c.message}}
          {{end}}
          {{end}}
        teams:
          facts: |
            [
              {
                "name": "Sync Status",
                "value": "{{.app.status.sync.status}}"
              },
              {
                "name": "Repository",
                "value": "{{.app.spec.source.repoURL}}"
              }
              {{range $index, $c := .app.status.conditions}}
                {{if not $index}},{{end}}
                {{if $index}},{{end}}
                {
                  "name": "{{$c.type}}",
                  "value": "{{$c.message}}"
                }
              {{end}}
            ]
          potentialAction: |-
            [
              {
                "@type":"OpenUri",
                "name":"Open Repository",
                "targets":[{
                  "os":"default",
                  "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                }]
              },
              {
                "@type":"OpenUri",
                "name":"Open Application",
                "targets":[{
                  "os":"default",
                  "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}"
                }]
              }
            ]
          title: Application {{.app.metadata.name}} sync status is 'Unknown'
      template.app-sync-succeeded: |
        email:
          subject: Application {{.app.metadata.name}} has been successfully synced.
        message: |
          {{if eq .serviceType "slack"}}:white_check_mark:{{end}} Application {{.app.metadata.name}} has been successfully synced at {{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05"}}.
          Sync operation details are available at: {{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true .
        teams:
          themeColor: "#000080"
          facts: |
            [
              {
                "name": "Sync Status",
                "value": "{{.app.status.sync.status}}"
              },
              {
                "name": "Synced at",
                "value": "{{(call .time.Parse .app.status.operationState.finishedAt).Local.Format "02/01/2006 15:04:05"}}"
              },
              {
                "name": "Repository",
                "value": "{{.app.spec.source.repoURL}}"
              }
              {{range $index, $c := .app.status.conditions}}
                {{if not $index}},{{end}}
                {{if $index}},{{end}}
                {
                  "name": "{{$c.type}}",
                  "value": "{{$c.message}}"
                }
              {{end}}
            ]
          potentialAction: |-
            [
              {
                "@type":"OpenUri",
                "name":"Open Repository",
                "targets":[{
                  "os":"default",
                  "uri":"{{.app.spec.source.repoURL | call .repo.RepoURLToHTTPS}}"
                }]
              },
              {
                "@type":"OpenUri",
                "name":"Operation Details",
                "targets":[{
                  "os":"default",
                  "uri":"{{.context.argocdUrl}}/applications/{{.app.metadata.name}}?operation=true"
                }]
              }
            ]
          title: Application {{.app.metadata.name}} has been successfully synced
        googlechat:
          cards: |
            - header:
                title: Application {{.app.metadata.name}} has been successfully synced
              sections:
                - widgets:
                    - textParagraph:
                        text: The app {{ .app.metadata.name }} has succesfully synced!
                - widgets:
                    - keyValue:
                        topLabel: Repository
                        content: {{ call .repo.RepoURLToHTTPS .app.spec.source.repoURL }}
                    - keyValue:
                        topLabel: Revision
                        content: {{ .app.spec.source.targetRevision }}
                    - keyValue:
                        topLabel: Author
                        content: {{ (call .repo.GetCommitMetadata .app.status.sync.revision).Author }}
    triggers:
      # For more information: https://argocd-notifications.readthedocs.io/en/stable/triggers/
      trigger.on-created: |
        - description: Application is created.
          oncePer: app.metadata.name
          send:
          - app-created
          when: "true"
      trigger.on-deleted: |
        - description: Application is deleted.
          oncePer: app.metadata.name
          send:
          - app-deleted
          when: app.metadata.deletionTimestamp != nil
      trigger.on-deployed: |
        - description: Application is synced and healthy. Triggered once per commit.
          oncePer: app.status.operationState.syncResult.revision
          send:
          - app-deployed
          when: app.status.operationState.phase in ['Succeeded'] and app.status.health.status == 'Healthy'
      trigger.on-health-degraded: |
        - description: Application has degraded
          send:
          - app-health-degraded
          when: app.status.health.status == 'Degraded'
      trigger.on-sync-failed: |
        - description: Application syncing has failed
          send:
          - app-sync-failed
          when: app.status.operationState.phase in ['Error', 'Failed']
      trigger.on-sync-running: |
        - description: Application is being synced
          oncePer: app.status.sync.revision
          send:
          - app-sync-running
          when: app.status.operationState.phase in ['Running']
      trigger.on-sync-status-unknown: |
        - description: Application status is 'Unknown'
          send:
          - app-sync-status-unknown
          when: app.status.sync.status == 'Unknown'
      trigger.on-sync-succeeded: |
        - description: Application syncing has succeeded
          oncePer: app.status.sync.revision
          send:
          - app-sync-succeeded
          when: app.status.operationState.phase in ['Succeeded']
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
  redis:
    image:
      imagePullPolicy: Always
    livenessProbe:
      enabled: true
    readinessProbe:
      enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 100m # 250m
        memory: 64Mi # 128Mi
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
      resources:
        limits:
          cpu: 50m
          memory: 64Mi
        requests:
          cpu: 10m
          memory: 32Mi
    containerSecurityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      allowPrivilegeEscalation: false
  repoServer:
    # -- Repo server log format: Either `text` or `json`
    # @default -- `""` (defaults to global.logging.level)
    logFormat: ""
    # -- Repo server log level. One of: `debug`, `info`, `warn` or `error`
    # @default -- `""` (defaults to global.logging.format)
    logLevel: ""

    image:
      imagePullPolicy: Always
    livenessProbe:
      enabled: true
    readinessProbe:
      enabled: true
    resources:
      limits:
        cpu: '1'
        memory: 512Mi
      requests:
        cpu: 10m # 250m
        memory: 64Mi # 256Mi
    copyutil:
      limits:
        cpu: 50m
        memory: 64Mi
      requests:
        cpu: 10m
        memory: 32Mi
    # containerSecurityContext:
    #   capabilities:
    #     drop:
    #       - ALL
    #   readOnlyRootFilesystem: true
    #   runAsNonRoot: true
    #   allowPrivilegeEscalation: false

    # 1. Define an emptyDir volume which will hold the custom binaries
    volumes:
      - name: custom-tools
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
    # 2. Use an init container to download/copy custom binaries into the emptyDir
    # -- Init containers to add to the repo server pods
    initContainers:  #[]
      # Error: loading generator plugins: unable to find plugin root - tried: 
      # ('/home/me/.kustomize/plugins'; homed in $KUSTOMIZE_PLUGIN_HOME),
      # ('<no value>'; homed in $XDG_CONFIG_HOME), 
      # ('/home/me/.config/kustomize/plugin'; homed in default value of $XDG_CONFIG_HOME),
      # ('/home/me/kustomize/plugin'; homed in home directory)
      - name: download-tools
        image: docker.io/library/alpine:3.9.6 # docker run quay.io/skopeo/stable:latest list-tags docker://docker.io/library/alpine  | yq e -P
        command: [sh, -c]
        args:
          - set  -x && 
            cd /tmp && 
            OS=$(uname | tr '[:upper:]' '[:lower:]') &&
            ARCH=$(uname -m | sed 's/x86_64/amd64/; s/aarch64/arm64/') &&
            wget -qO- https://github.com/mgoltzsche/khelm/releases/latest/download/khelm-${OS}-${ARCH} > /custom-tools/khelm &&
            chmod +x /custom-tools/khelm &&
            mkdir -p /custom-tools/.kustomize/plugins/khelm.mgoltzsche.github.com/v2/chartrenderer &&
            cp /custom-tools/khelm /custom-tools/.kustomize/plugins/khelm.mgoltzsche.github.com/v2/chartrenderer/ChartRenderer
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
          - mountPath: /tmp
            name: tmp
    # 3. Volume mount the custom binary to the bin directory (overriding the existing version)
    volumeMounts:
      # - mountPath: /usr/local/bin/helm
      #   name: custom-tools
      #   subPath: helm
      # - mountPath: /usr/local/bin/kustomize
      #   name: custom-tools
      #   subPath: kustomize
      - mountPath: /usr/local/bin/.kustomize
        name: custom-tools
        subPath: .kustomize
      - mountPath: /home/argocd/.cache/helm
        name: cache
    # see: https://github.com/argoproj/argo-cd/blob/master/common/common.go
    env:
      # https://github.com/argoproj/argo-cd/issues/2553
      - name: ARGOCD_EXEC_TIMEOUT
        value: 3m

      # # https://argo-cd.readthedocs.io/en/stable/operator-manual/high_availability/#scaling-up
      # - name: ARGOCD_GIT_ATTEMPTS_COUNT
      #   value: "5" # Default: 5 - Specifies number of git remote operations attempts count

      # - name: ARGOCD_GIT_RETRY_MAX_DURATION
      #   value: 5s # Default: 5s - Specifices max duration of git remote operation retry

      # - name: ARGOCD_GIT_RETRY_DURATION
      #   value: 0.25s # Default: 0.25s - Specifies duration of git remote operation retry

      # - name: ARGOCD_GIT_RETRY_FACTOR
      #   value: "2" # Default: 2 - Specifies fator of git remote operation retry

      # - name: ARGOCD_GIT_MODULES_ENABLED
      #   value: "false" # Overrides git submodule support, true by default

      - name: KUSTOMIZE_PLUGIN_HOME
        value: /usr/local/bin/.kustomize/plugins
      # environment variable that enables collecting RPC performance metrics. Enable it if you need to troubleshoot performance issue. Note: metric is expensive to both query and store!
      - name: ARGOCD_ENABLE_GRPC_TIME_HISTOGRAM
        value: "true"
      # helm values are inserted at the beginning of the env array (cf. https://github.com/argoproj/argo-helm/blob/argo-cd-5.16.4/charts/argo-cd/templates/argocd-repo-server/deployment.yaml#L68-L70 )
      # HELM_CACHE_HOME is override (cf. https://github.com/argoproj/argo-helm/blob/argo-cd-5.16.4/charts/argo-cd/templates/argocd-repo-server/deployment.yaml#L207-L212 )
      # so, use kustomize patche in order to override HELM_CACHE_HOME
      # - name: HELM_CACHE_HOME
      #   value: /home/argocd/.cache/helm # override thanks kustomize
    extraArgs:
    - --parallelismlimit 5 #70 #Limit on number of concurrent manifests generate requests. Any value less the 1 means no limit.
    # - --tlsmaxversion 1.2
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
  server:
    # -- Argo CD server log format: Either `text` or `json`
    # @default -- `""` (defaults to global.logging.format)
    logFormat: ""
    # -- Argo CD server log level. One of: `debug`, `info`, `warn` or `error`
    # @default -- `""` (defaults to global.logging.level)
    logLevel: ""

    # -- Manage Argo CD configmap (Declarative Setup)
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/argocd-cm.yaml
    configEnabled: true
    # -- [General Argo CD configuration]
    # @default -- See [values.yaml]
    config:
      timeout.reconciliation: 3m #15s
      kustomize.buildOptions: --enable-alpha-plugins --enable-helm --load-restrictor LoadRestrictionsNone
      # configManagementPlugins: |
      #   - name: pluginName
      #     init:
      #       command: ["sample command"]
      #       args: ["sample args"]
      #     generate:
      #       command: ["sample command"]
      #       args: ["sample args"]
      #     lockRepo: true
    # -- The number of server pods to run
    replicas: 1

    autoscaling:
      # -- Enable Horizontal Pod Autoscaler ([HPA]) for the Argo CD server
      enabled: false
      # -- Minimum number of replicas for the Argo CD server [HPA]
      minReplicas: 1
      # -- Maximum number of replicas for the Argo CD server [HPA]
      maxReplicas: 5
      # -- Average CPU utilization percentage for the Argo CD server [HPA]
      targetCPUUtilizationPercentage: 50
      # -- Average memory utilization percentage for the Argo CD server [HPA]
      targetMemoryUtilizationPercentage: 50

    # -- Additional command line arguments to pass to Argo CD server
    extraArgs:
      - --insecure
    # -- Environment variables to pass to Argo CD server
    env:
      - name: HOME
        value: /tmp/argocd
      # - name: ARGOCD_GPG_ENABLED
      #   value: "false"
    image:
      imagePullPolicy: Always
    livenessProbe:
      enabled: true
    readinessProbe:
      enabled: true
    resources:
      limits:
        cpu: 500m
        memory: 256Mi
      requests:
        cpu: 50m
        memory: 64Mi
    containerSecurityContext:
      capabilities:
        drop:
          - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      allowPrivilegeEscalation: false
    # -- Deploy Argo CD Projects within this helm release
    # @default -- `[]` (See [values.yaml])
    ## Ref: https://github.com/argoproj/argo-cd/blob/master/docs/operator-manual/
    additionalProjects:
    - name: default
      namespace: argocd
      sourceRepos:
      - '*'
      destinations:
      - namespace: '*'
        server: '*'
      clusterResourceWhitelist:
      - group: '*'
        kind: '*'
    metrics:
      enabled: true
      serviceMonitor:
        enabled: true
        additionalLabels:
          release: kube-prometheus-stack
