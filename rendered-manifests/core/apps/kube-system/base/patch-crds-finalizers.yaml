---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: patch-crds-finalizers
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: system:patch-crds-finalizers
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
  - list
- apiGroups:
  - "apiextensions.k8s.io"
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
- apiGroups:
  - "cert-manager.io"
  resources:
  - issuers
  - clusterissuers
  - certificates
  - certificaterequests
  verbs:
  - get
  - list
  - patch
- apiGroups:
  - "acme.cert-manager.io"
  resources:
  - orders
  - challenges
  verbs:
  - get
  - list
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: system:patch-crds-finalizers
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:patch-crds-finalizers
subjects:
- kind: ServiceAccount
  name: patch-crds-finalizers
  namespace: kube-system
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: patch-crds-finalizers
  namespace: kube-system
spec:
  schedule: "0 * * * *"
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          volumes:
            - name: tmp
              emptyDir: {}
          containers:
            - 
              name: kubectl
              command:
              - /bin/sh
              - -c
              - |
                /bin/bash <<'EOF'
                  set -euo pipefail
                  set -x
                  if [[ -z "$(kubectl get namespaces -ojsonpath='{.items[*].metadata.name}' -l kubernetes.io/metadata.name=cert-manager)" ]]; then
                    for crd in issuers.cert-manager.io clusterissuers.cert-manager.io certificates.cert-manager.io certificaterequests.cert-manager.io orders.acme.cert-manager.io challenges.acme.cert-manager.io; do
                      crds=$(kubectl get customresourcedefinition.apiextensions.k8s.io -ojsonpath='{.items[*].metadata.name}')
                      if [[ $crds =~ (^|[[:space:]])${crd//./\\.}($|[[:space:]]) ]]; then
                        for n in $(kubectl get namespaces -ojsonpath='{.items[*].metadata.name}'); do
                          for o in $(kubectl get $crd -ojsonpath='{.items[*].metadata.name}' -n $n);do
                            set +e
                            kubectl patch  $crd $o -n $n --type json --patch='[ { "op": "remove", "path": "/metadata/finalizers" } ]'
                            kubectl delete $crd $o -n $n &
                            set -e
                          done
                        done
                      fi
                    done
                  fi
                EOF
              image: docker.io/alpine/k8s:1.25.4
              imagePullPolicy: IfNotPresent
              securityContext:
                runAsNonRoot: false
                readOnlyRootFilesystem: true
                allowPrivilegeEscalation: false
                capabilities:
                  drop:
                  - ALL
              resources:
                limits:
                  cpu: 500m
                  memory: 256Mi
                requests:
                  cpu: 1m
                  memory: 1Mi
              volumeMounts:
                - name: tmp
                  mountPath: /tmp
          restartPolicy: Never
          serviceAccountName: patch-crds-finalizers
