---
apiVersion: batch/v1
kind: Job
metadata:
  name: install-argocd
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "kustomization.labels" . | nindent 4 }}
  annotations:
    helm.sh/hook: post-install,post-upgrade
    meta.helm.sh/release-name: {{ .Release.Name }}
    meta.helm.sh/release-namespace: {{ .Release.Namespace }}
spec:
  backoffLimit: 0
  template:
    spec:
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      volumes:
        {{- with .Values.volumesAndMounts.volumes }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      containers:
      - 
        name: kubectl
        command:
        - /bin/sh
        - -c
        - |
          /bin/bash <<'EOF'
            trap "kubectl delete clusterroles.rbac.authorization.k8s.io system:{{ include "kustomization.fullname" . }}" EXIT
            declare TMP=$(mktemp --directory /tmp/kubectl.XXXXXXXXXX)
            set -euo pipefail
            set -x

            folder=core/crds
            for crd in $(curl -s https://api.github.com/repos/${OWNER}/${REPO}/contents/${folder}\?ref\=${REF} | jq -r '.[].name'); do
              kubectl apply -k https://github.com/${OWNER}/${REPO}/${folder}/${crd}/overlays/${CLUSTER}-${ENV}/\?ref\=${REF} --server-side=true --force-conflicts
            done

            folder=addons/crds
            for crd in $(curl -s https://api.github.com/repos/${OWNER}/${REPO}/contents/${folder}\?ref\=${REF} | jq -r '.[].name'); do
              kubectl apply -k https://github.com/${OWNER}/${REPO}/${folder}/${crd}/overlays/${CLUSTER}-${ENV}/\?ref\=${REF} --server-side=true --force-conflicts
            done

            git clone https://github.com/${OWNER}/${REPO}.git --depth=1 --branch ${REF} --single-branch $TMP/${REPO}

            folder=core/apps
            app=kube-system
            kustomize \
              --stack-trace \
              --enable-alpha-plugins \
              --enable-helm \
              --load-restrictor LoadRestrictionsNone build $TMP/${REPO}/${folder}/${app}/overlays/${CLUSTER}-${ENV} \
            | kubectl apply -f -

            app=argocd
            kustomize \
              --stack-trace \
              --enable-alpha-plugins \
              --enable-helm \
              --load-restrictor LoadRestrictionsNone build $TMP/${REPO}/${folder}/${app}/overlays/${CLUSTER}-${ENV} \
            | kubectl apply -f -

            for k in deployment statefulset daemonset;
            do
              for o in $(kubectl -n argocd get $k -l app.kubernetes.io/part-of=argocd -o jsonpath='{.items[*].metadata.name}');
              do
                kubectl -n argocd rollout status $k/$o
              done
            done

            cat << EOF > $TMP/kustomization.yaml
            apiVersion: kustomize.config.k8s.io/v1beta1
            kind: Kustomization
            namespace: argocd
            secretGenerator:
            - name: kind
              type: Opaque
              options:
                disableNameSuffixHash: true
                labels:
                  argocd.argoproj.io/secret-type: cluster
              envs:
                - /tmp/argocd-cluster-name.env
              literals:
                - server=https://kubernetes.default.svc
                - config={"tlsClientConfig":{"insecure":false}}
            EOF
            echo "name=${CLUSTER}-${ENV}" > $TMP/argocd-cluster-name.env
            cd $TMP
            kustomize --load-restrictor LoadRestrictionsNone build | kubectl apply -f -
          EOF
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","kubectl delete clusterroles.rbac.authorization.k8s.io system:{{ include "kustomization.fullname" . }} 1>> /proc/1/fd/1 2>> /proc/1/fd/2"]
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        env:
          {{- range $key, $value := .Values.env.fromValues }}
          - name: {{ $key }}
            value: {{ $value | quote }}
          {{- end }}
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: true
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
        volumeMounts:
          {{- with .Values.volumesAndMounts.volumeMounts }}
            {{- toYaml . | nindent 10 }}
          {{- end }}
      restartPolicy: Never
      serviceAccountName: {{ include "kustomization.serviceAccountName" . }}
